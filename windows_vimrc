

source $VIMRUNTIME/vimrc_example.vim
behave mswin
let mapleader =" "
nnoremap <leader>ex :Explore<cr>
noremap <leader>% :source %<cr>
noremap H ^
nnoremap L $
inoremap jk <Esc>
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>j gt
nnoremap <leader>k gT
nnoremap <leader>= "=
nnoremap <leader>% :source %<cr>
nnoremap <leader>g <c-]>
"回车即选中当前项
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"             
" 映射切换buffer的键位
nnoremap <leader>p :bp<CR>
nnoremap <leader>n :bn<CR>
" 映射<leader>num到num buffer
inoremap ( ()<ESC>i
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap { {}<ESC>i
inoremap } <c-r>=ClosePair('}')<CR>
inoremap [ []<ESC>i
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap " ""<ESC>i
inoremap ' ''<ESC>i
function! ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

colorscheme habamax  
set pythonthreedll=python39.dll
filetype on " 侦测文件类型
filetype plugin indent on 
syntax on
syntax enable
set autoread " 设置当文件被改动时自动载入
set completeopt=preview,menu  "代码补全 
set clipboard=unnamed  "共享剪贴板  
set nobackup "从不备份  
set makeprg=g++\ -Wall\ \ % "make 运行
set autowrite "自动保存
set ruler                   " 打开状态栏标尺
"set cursorline              " 突出显示当前行
set magic                   " 设置魔术
set guioptions-=T           " 隐藏工具栏
set guioptions-=m           " 隐藏菜单栏
set foldcolumn=0
set foldmethod=indent		"利用缩进折叠代码 
set foldlevel=3 
set foldenable              " 开始折叠
set syntax=on " 语法高亮
set noeb " 去掉输入错误的提示声音
set confirm " 在处理未保存或只读文件的时候，弹出确认
set autoindent " 自动缩进
set cindent
set tabstop=4 " Tab键的宽度
set softtabstop=4 " 统一缩进为4
set shiftwidth=4
set noexpandtab " 不要用空格代替制表符
set smarttab " 在行和段开始处使用制表符
set number " 显示行号
set history=10000 " 历史记录数
set nobackup "禁止生成临时文件
set noswapfile
set ignorecase "搜索忽略大小写
set hlsearch "搜索逐字符高亮
""set incsearch
set gdefault "行内替换
set enc=utf-8 "编码设置
set termencoding=utf-8 "屏幕显示的编码
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set langmenu=en
set helplang=cn
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} " 我的状态行显示的内容（包括文件类型和解码）
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
set laststatus=2 " 总是显示状态行
set cmdheight=2 " 命令行（在状态行下）的高度，默认为1，这里是2
set viminfo+=! " 保存全局变量
set iskeyword+=_,$,@,%,#,- " 带有如下符号的单词不要被换行分割
set linespace=0 " 字符间插入的像素行数目
set wildmenu " 增强模式中的命令行自动完成操作
set backspace=2 " 使回格键（backspace）正常处理indent, eol, start等
"set whichwrap+=<,>,h,l " 允许backspace和光标键跨越行边界
set mouse=a " 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set selection=exclusive
set selectmode=mouse,key
set report=0 " 通过使用: commands命令，告诉我们文件的哪一行被改变过
set fillchars=vert:\ ,stl:\ ,stlnc:\  " 在被分割的窗口间显示空白，便于阅读
"set showmatch " 高亮显示匹配的括号
"set matchtime=1 " 匹配括号高亮的时间（单位是十分之一秒）
set scrolloff=4" 光标移动到buffer的顶部和底部时保持3行距离
set smartindent " 为C程序提供自动缩进
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"" au BufRead,BufNewFile *  setfiletype txt " 高亮显示普通txt文件（需要txt.vim脚本）
set completeopt=longest,menu "打开文件类型检测, 加了这句才可以用智能补全
set nocompatible "不要使用vi的键盘模式，而是vim自己的
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set diffexpr=MyDiff()

let g:netrw_preview           = 1
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

set fileencodings=utf-8,gbk,big5

"---------------------bundle-Start---------"
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
""Plugin 'scrooloose/nerdtree'
""Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'yianwillis/vimcdoc'
""Plugin 'vim-airline/vim-airline'
""Plugin 'Valloric/YouCompleteMe'
Plugin 'indentLine.vim'
""Plugin 'delimitMate.vim'
Plugin 'taglist.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
" vim-scripts 中的插件 "

" 非 github 仓库的插件"
" Plugin 'git://git.wincent.com/command-t.git'
" 本地仓库的插件 "

" YouCompleteMe:语句补全插件
set runtimepath+=$VIM/vimfiles/bundle/YouCompleteMe
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口"
let g:ycm_collect_identifiers_from_tags_files = 1           " 开启 YCM基于标签引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释与字符串中的内容也用于补全
let g:syntastic_ignore_files=[".*\.py$"]
let g:ycm_seed_identifiers_with_syntax = 1                  " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_confirm_extra_conf = 0                            " 关闭加载.ycm_extra_conf.py提示
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
let g:ycm_complete_in_comments = 1                          " 在注释输入中也能补全
let g:ycm_complete_in_strings = 1                           " 在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 注释和字符串中的文字也会被收入补全
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_show_diagnostics_ui = 0                           " 禁用语法检查
let g:ycm_min_num_of_chars_for_completion=2                 " 从第2个键入字符就开始罗列匹配项

 
"""vim-airline配置:优化vim界面"
""let g:airline#extensions#tabline#enabled = 1
""" airline设置
""" 显示颜色
"""set t_Co=256
""set laststatus=2
""let g:airline_powerline_fonts = 1 " 使用powerline打过补丁的字体
""let g:airline#extensions#tabline#left_sep = ' ' " tabline中当前buffer两端的分隔字符
""let g:airline#extensions#tabline#left_alt_sep = ' ' " tabline中未激活buffer两端的分隔字符
""let g:airline#extensions#tabline#buffer_nr_show = 1 " tabline中buffer显示编号

"Markdown-preview 配置" 
" 使用谷歌浏览器
let g:mkdp_brower = 'chromium'
" Ctrl + p 打开/关闭预览
""nmap <C-p> :MarkdownPreviewToggle<CR>

"taglist配置
let Tlist_Use_Right_Window=1
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_WinWidt=25
 
 
call vundle#end()
filetype plugin indent on
"---------------------bundle-End---------"
"nerdtree  配置"
""map <leader>t :NERDTreeToggle<CR> " 关闭NERDTree快捷键
""let NERDTreeShowLineNumbers=1 "显示行号
""let NERDTreeAutoCenter=1
""let NERDTreeShowHidden=1 " 是否显示隐藏文件
""let NERDTreeWinSize=21 "设置宽度
""let g:nerdtree_tabs_open_on_console_startup=1 " 在终端启动vim时，共享NERDTree
""let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.un~'] "忽略一下文件的显示
""
""nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>     " 跳转到定义处

map <F3> :TlistToggle<CR>

" quickfix模式
autocmd FileType c,cpp map <buffer> <leader>cr :w<cr>:call CompileRun()<cr>:call Run()<cr>
"定义CompileRun函数，用来调用进行编译和运行
function! CompileRun()
	exec "w"
	"C程序
	if &filetype == 'c' 
		exec "!gcc -Wall % -g -o %<.exe" 
		"c++程序 
	elseif &filetype == 'cpp' 
		exec "!g++ -Wall % -g -o %<.exe" 
		"Java程序
elseif &filetype == 'java' 
		exec "!javac %" 
	endif 
endfunc

"定义Run函数
function! Run() 
	if &filetype == 'c' || &filetype == 'cpp' 
		exec "!%<.exe" 
	elseif &filetype == 'java' 
		exec "!java %<" 
	endif 
endfunc

"定义Debug函数，用来调试程序 
function! Debug() 
	exec "w" 
	"C程序 
	if &filetype == 'c' 
		exec "!gcc % -g -o %<.exe" 
		exec "!gdb %<.exe" 
	elseif &filetype == 'cpp' 
		exec "!g++ % -g -o %<.exe" 
		exec "!gdb %<.exe" 
		"Java程序 
	elseif &filetype == 'java' 
		exec "!javac %" 
		exec "!jdb %<" 
	endif 
endfunc
"结束定义Debug

function! LcTranslate()
	exec "w"
	exec ":.s\/\\[\/\\{"
	exec ":.s\/\\]\/\\}"
endfunc


"设置程序的运行和调试的快捷键F5和Ctrl-F5 
map <F5> :call CompileRun()<CR> 
map <F6> :call Run()<CR> 
map <C-F5> :call Debug()<CR>
map <C-1> :!cmd<CR>

"""=>在shell脚本开头自动增加解释器以及作者等版权信息<="""
"新建.py,.cc,.sh,.java文件，自动插入文件头"
autocmd BufNewFile *.py,*.cc,*.sh,*.java,*.cpp,*.c exec ":call SetTitle()"
"定义函数SetTitle，自动插入文件头"
function! SetTitle()
	if expand ("%:e") == 'sh'
		call setline(1, "!/bin/bash")
		call setline(2, "#Author:LvXudong")
		call setline(3, "#Time:".strftime("%Y 年 %b %d日 %X"))
		call setline(4, "#Name:".expand("%"))
		call setline(5, "#Version:V1.0")
		call setline(6, "#Description:This is a production script.")
	elseif expand ("%:e") == 'cpp' || expand ("%:e") == 'c' 
		call setline(1, "//Author:LvXuDong")
		call setline(2, "//Blog:lxd_ls")
		call setline(3, "//Time:".strftime("%Y 年 %b %d日 %X"))
		call setline(4, "//Name:".expand("%")) 
	else
		call setline(1, "//Author:LvXuDong")
		call setline(2, "//Blog:lxd_ls")
		call setline(3, "//Time:".strftime("%Y 年 %b %d日 %X"))
		call setline(4, "//Name:".expand("%")) 
	endif

endfunc
